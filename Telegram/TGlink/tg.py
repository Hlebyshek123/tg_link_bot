import telebot
import os
import sqlite3
from datetime import datetime
import yaml
from threading import Lock
from mcrcon import MCRcon
import multiprocessing
from multiprocessing import Process

bot = telebot.TeleBot("TOKEN")

RCON_HOST = "127.0.0.1"
RCON_PORT = 19132
RCON_PASSWORD = "12345"

kick_cmd = "kick" #–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–∏–∫–∞

# –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
db_path_minecraft = "/root/TGlink/minecraft_accounts.db"
db_path_auth = "/root/srvok/plugins/TGAuth/auth.db"
db_codes_path = "/root/TGlink/temp_codes.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
db_lock = Lock()

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Minecraft, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def initialize_minecraft_db():
    conn = sqlite3.connect(db_path_minecraft)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS accounts (
                      id INTEGER PRIMARY KEY,
                      username TEXT NOT NULL,
                      tg_id TEXT NOT NULL,
                      access INTEGER
                      )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS blocked (
                      id INTEGER PRIMARY KEY,
                      username TEXT NOT NULL,
                      tg_id TEXT NOT NULL,
                      reason TEXT NOT NULL,
                      time TEXT NOT NULL
                      )''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ TG ID
def check_account_limit(chat_id):
    conn = sqlite3.connect(db_path_minecraft, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM accounts WHERE tg_id = ?", (str(chat_id),))
    count = cursor.fetchone()[0]
    conn.close()
    return count < 3  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –û–¥–Ω–æ–º—É –ß–µ–ª—É –ò–º–µ—Ç—å –ê–∫–∫–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
def change_password(username, new_password):
    try:
        conn_auth = sqlite3.connect(db_path_auth)
        cursor = conn_auth.cursor()
        cursor.execute("UPDATE auth SET password = ? WHERE name = ?", (new_password, username))
        conn_auth.commit()
        conn_auth.close()
        return True
    except Exception as e:
        print(e)
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
def save_account(username, tg_id, code):
    try:
        conn = sqlite3.connect(db_path_minecraft)
        cursor = conn.cursor()
        cursor.execute("SELECT tg_id FROM accounts WHERE username = ?", (username,))
        result = cursor.fetchone()
        if result and result[0] != str(tg_id):
            print(f"Username {username} is already linked to another TG ID!")
            return False

        conn_temp = sqlite3.connect(db_codes_path)
        cursor_temp = conn_temp.cursor()
        cursor_temp.execute("SELECT * FROM temp_codes WHERE nickname = ? AND code = ?", (username, code))
        result = cursor_temp.fetchone()
        conn_temp.close()

        if result:
            cursor.execute("INSERT INTO accounts (username, tg_id, access) VALUES (?, ?, ?)", (username, tg_id, 0))
            conn.commit()
            conn.close()
            return True
        else:
            return False
    except Exception as e:
        print(e)
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
def remove_account(username):
    try:
        conn = sqlite3.connect(db_path_minecraft)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM accounts WHERE username = ?", (username,))
        conn.commit()
        conn.close()
    except Exception as e:
        print(e)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã temp_codes
def create_temp_codes_table():
    conn = sqlite3.connect(db_codes_path)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS temp_codes (
                      id INTEGER PRIMARY KEY,
                      nickname TEXT NOT NULL,
                      code TEXT NOT NULL
                      )''')
    conn.commit()
    conn.close()

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã temp_codes –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–∞–π–ª–∞
def fill_temp_codes_table():
    codes_file_path = "/root/srvok/plugins/TGCode/codes.yml"
    try:
        with open(codes_file_path, "r") as codes_file:
            codes_data = yaml.safe_load(codes_file)
        
        conn = sqlite3.connect(db_codes_path)
        cursor = conn.cursor()

        for nickname, data in codes_data.items():
            code = data.get('code')
            cursor.execute("SELECT * FROM temp_codes WHERE nickname = ?", (nickname,))
            existing_data = cursor.fetchone()
            if not existing_data:
                cursor.execute("INSERT INTO temp_codes (nickname, code) VALUES (?, ?)", (nickname, code))

        conn.commit()
        conn.close()
    except FileNotFoundError:
        print("File with confirmation codes not found!")
    except Exception as e:
        print("Error:", e)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "üîÆ | –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–≤—è–∑–∞—Ç—å –Ω–∏–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–≤–æ–π —Ç–≥ –∞–∫–∫–∞—É–Ω—Ç: –Ω–∞–ø–∏—à–∏ –º–Ω–µ /link :D")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /link
@bot.message_handler(commands=['link'])
def link_account(message):
    fill_temp_codes_table()
    chat_id = message.chat.id
    msg = bot.reply_to(message, "‚ù§ | –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–∏–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, /link hleb_1M5QR1TQ): \n ü™Ñ | –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ")
    bot.register_next_step_handler(msg, process_link_step, chat_id)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
def process_link_step(message, chat_id):
    text = message.text.split()
    if len(text) != 2:
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n ü™Ñ | –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link <–Ω–∏–∫–Ω–µ–π–º>_<–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è>\n ü™Ñ | –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ")
        return
    username, code = text[1].split('_', 1)

    if not check_account_limit(chat_id):
        bot.reply_to(message, "üö´ | –£ –≤–∞—Å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤! (–º–∞–∫—Å–∏–º—É–º 3)")
        return
    
    if save_account(username, chat_id, code):
        bot.reply_to(message, f"‚ù§ | –¢–≤–æ–π –Ω–∏–∫ {username} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¢–ì –±–æ—Ç—É! :o \n üìù | –∏–Ω—Ñ–æ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ /mc_profile :]")
    else:
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. :'( \n ü™Ñ | –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
initialize_minecraft_db()
create_temp_codes_table()
fill_temp_codes_table()

@bot.message_handler(commands=['unlink'])
def unlink_account(message):
    chat_id = message.chat.id
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT username FROM accounts WHERE tg_id = ?", (str(chat_id),))
    result = cursor_minecraft.fetchall()
    if result:
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        for i, row in enumerate(result):
            keyboard.add(f"{i + 1}. {row[0]}")
        msg = bot.reply_to(message, "üíî | –í—ã–±–µ—Ä–∏ –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–≤—è–∑–∞—Ç—å –æ—Ç –¢–ì –±–æ—Ç–∞:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_unlink_step)
    else:
        bot.reply_to(message, "üö´ | –¢–≤–æ–π –Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¢–ì –±–æ—Ç—É :'(")
    conn_minecraft.close()

def process_unlink_step(message):
    chat_id = message.chat.id
    text = message.text.split('.')
    if len(text) != 2 or not text[0].isdigit():
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –≤—ã–±–µ—Ä–∏ –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–≤—è–∑–∞—Ç—å, –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    num = int(text[0])
    if num < 1 or num > 3:
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 3.")
        return
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT username FROM accounts WHERE tg_id = ?", (str(chat_id),))
    result = cursor_minecraft.fetchall()
    if len(result) >= num:
        username = result[num - 1][0]
        remove_account(username)
        bot.reply_to(message, f"üíî | –¢–≤–æ–π –Ω–∏–∫ {username} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –¢–ì –±–æ—Ç–∞ :'(")
                # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        bot.send_message(chat_id, "üíî", reply_markup=telebot.types.ReplyKeyboardRemove())
    else:
        bot.reply_to(message, f"üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(result)}.")
    conn_minecraft.close()

# –ü—É—Ç—å –∫ –ø–ª–∞–≥–∏–Ω—É TGplaytime –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Minecraft
tg_playtime_path = "/root/srvok/plugins/TGplaytime/"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É last_date.yml –≤ –ø–ª–∞–≥–∏–Ω–µ TGplaytime –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Minecraft
last_date_yml_path = os.path.join(tg_playtime_path, "last_date.yml")

@bot.message_handler(commands=['mc_profile'])
def mc_profile_command(message):
    chat_id = message.chat.id
    text = message.text.split()
    if len(text) == 1:
        conn_minecraft = sqlite3.connect(db_path_minecraft)
        cursor_minecraft = conn_minecraft.cursor()
        cursor_minecraft.execute("SELECT username FROM accounts WHERE tg_id = ?", (str(chat_id),))
        result = cursor_minecraft.fetchall()
        if result:
            keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            for i, row in enumerate(result):
                keyboard.add(f"{i + 1}. {row[0]}")
            msg = bot.reply_to(message, "üìÉ | –í—ã–±–µ—Ä–∏ –Ω–∏–∫, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=keyboard)
            bot.register_next_step_handler(msg, process_mc_profile_step)  # Changed here
        else:
            bot.reply_to(message, "üö´ | –¢–≤–æ–π –Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¢–ì –±–æ—Ç—É :'(")
        conn_minecraft.close()
    elif len(text) == 2 and text[1].isdigit():
        num = int(text[1])
        conn_minecraft = sqlite3.connect(db_path_minecraft)
        cursor_minecraft = conn_minecraft.cursor()
        cursor_minecraft.execute("SELECT username FROM accounts WHERE tg_id = ?", (str(chat_id),))
        result = cursor_minecraft.fetchall()
        if len(result) >= num:
            username = result[num - 1][0]
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É time.yml –≤ –ø–ª–∞–≥–∏–Ω–µ playtime –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Minecraft
            time_yml_path = os.path.join(tg_playtime_path, "time.yml")
            with open(time_yml_path, 'r') as file:
                time_data = yaml.safe_load(file)
            if username in time_data:
                total_hours = time_data[username]['hour']
                total_minutes = time_data[username]['minute']
            else:
                total_hours = 0
                total_minutes = 0

            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É last_session.yml –≤ –ø–ª–∞–≥–∏–Ω–µ playtime –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Minecraft
            last_session_yml_path = os.path.join(tg_playtime_path, "last_session.yml")
            with open(last_session_yml_path, 'r') as file:
                last_session_data = yaml.safe_load(file)
            if username in last_session_data:
                last_session_minutes = last_session_data[username]['minutes']
                last_session_seconds = last_session_data[username]['seconds']
            else:
                last_session_minutes = 0
                last_session_seconds = 0

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞ last_date.yml
            with open(last_date_yml_path, 'r') as file:
                last_date_data = yaml.safe_load(file)
            last_date = last_date_data.get(username, {}).get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É pureperms –≤ –ø–ª–∞–≥–∏–Ω–µ pureperms –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Minecraft
            pureperms_path = os.path.join("/root/srvok/plugins/PurePerms/players/", f"{username}.yml")
            if os.path.exists(pureperms_path):
                with open(pureperms_path, 'r') as file:
                    pureperms_data = yaml.safe_load(file)
                if 'group' in pureperms_data:
                    privilege = pureperms_data['group']
                else:
                    privilege = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            else:
                privilege = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            conn_auth = sqlite3.connect(db_path_auth)
            cursor_auth = conn_auth.cursor()
            cursor_auth.execute("SELECT ip, device, os FROM auth WHERE name = ?", (username,))
            auth_info = cursor_auth.fetchone()
            if auth_info:
                ip = auth_info[0]
                device = auth_info[1]
                oss = auth_info[2]
            else:
                ip = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                device = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                oss = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            bot.reply_to(message, f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É {username}: \n\n‚≠ê | –¢–ì ID: {chat_id} \n ‚ù§ | –ü—Ä–∏–≤–µ–ª–µ–≥–∏—è: {privilege} \n üß≠ | –í—Å–µ –Ω–∞–∏–≥—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_hours} —á.{total_minutes} –º. \n üïì | –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è: {last_session_minutes} –º. {last_session_seconds} —Å. \n üîê | –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: \n ¬ª –î–∞—Ç–∞ - {last_date} \n ¬ª IP - {ip} \n ¬ª –û–° - {oss} \n ¬ª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - {device} \n\n üò∫ | –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º: \n\n ‚úâÔ∏è | –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - /say \n üîë | –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è - /ch_pass \n üëë | –º–æ–¥–µ—Ä–∞—Ü–∏—è - /moderate \n üßπ | –ö–∏–∫–Ω—É—Ç—å –∞–∫–∫–∞—É–Ω—Ç - /mc_kick \n üñ• | —Å–Ω—è—Ç—å CID –∑–∞—â–∏—Ç—É - /mc_cid \n üçÉ | —Å–Ω—è—Ç—å SKIN –∑–∞—â–∏—Ç—É - /mc_skin \n üíî | –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç - /unlink")
        else:
            bot.reply_to(message, "üö´ | –¢–≤–æ–π –Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¢–ì –±–æ—Ç—É –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
        conn_minecraft.close()
    else:
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mc_profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–ª–∏ /mc_profile <–Ω–æ–º–µ—Ä_–ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ_–∞–∫–∫–∞—É–Ω—Ç–∞> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ.")

def process_mc_profile_step(message):
    chat_id = message.chat.id
    text = message.text
    selected_account = None

    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT username FROM accounts WHERE tg_id = ?", (str(chat_id),))
    result = cursor_minecraft.fetchall()
    if result:
        try:
            selected_account = int(text.split('.')[0])
            if selected_account < 1 or selected_account > len(result):
                raise ValueError
        except ValueError:
            bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –≤—ã–±–µ—Ä–∏ –Ω–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        username = result[selected_account - 1][0]
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É time.yml –≤ –ø–ª–∞–≥–∏–Ω–µ playtime –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Minecraft
        time_yml_path = os.path.join(tg_playtime_path, "time.yml")
        with open(time_yml_path, 'r') as file:
            time_data = yaml.safe_load(file)
        if username in time_data:
            total_hours = time_data[username]['hour']
            total_minutes = time_data[username]['minute']
        else:
            total_hours = 0
            total_minutes = 0

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É last_session.yml –≤ –ø–ª–∞–≥–∏–Ω–µ playtime –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Minecraft
        last_session_yml_path = os.path.join(tg_playtime_path, "last_session.yml")
        with open(last_session_yml_path, 'r') as file:
            last_session_data = yaml.safe_load(file)
        if username in last_session_data:
            last_session_minutes = last_session_data[username]['minutes']
            last_session_seconds = last_session_data[username]['seconds']
        else:
            last_session_minutes = 0
            last_session_seconds = 0

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞ last_date.yml
        with open(last_date_yml_path, 'r') as file:
            last_date_data = yaml.safe_load(file)
        last_date = last_date_data.get(username, {}).get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É pureperms –≤ –ø–ª–∞–≥–∏–Ω–µ pureperms –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Minecraft
        pureperms_path = os.path.join("/root/srvok/plugins/PurePerms/players/", f"{username}.yml")
        if os.path.exists(pureperms_path):
            with open(pureperms_path, 'r') as file:
                pureperms_data = yaml.safe_load(file)
            if 'group' in pureperms_data:
                privilege = pureperms_data['group']
            else:
                privilege = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            privilege = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        conn_auth = sqlite3.connect(db_path_auth)
        cursor_auth = conn_auth.cursor()
        cursor_auth.execute("SELECT ip, device, os FROM auth WHERE name = ?", (username,))
        auth_info = cursor_auth.fetchone()
        if auth_info:
            ip = auth_info[0]
            device = auth_info[1]
            oss = auth_info[2]
        else:
            ip = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            device = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            oss = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        bot.reply_to(message, f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É {username}: \n\n ‚≠ê | –¢–ì ID: {chat_id} \n  ‚ù§ | –ü—Ä–∏–≤–µ–ª–µ–≥–∏—è: {privilege} \n üß≠ | –í—Å–µ –Ω–∞–∏–≥—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_hours} —á.{total_minutes} –º. \n üïì | –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è: {last_session_minutes} –º. {last_session_seconds} —Å. \n üîê | –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: \n ¬ª –î–∞—Ç–∞ - {last_date} \n ¬ª IP - {ip} \n ¬ª –û–° - {oss} \n ¬ª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - {device} \n\n üò∫ | –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º: \n\n ‚úâÔ∏è | –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - /say \n üîë | –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è - /ch_pass \n üëë | –º–æ–¥–µ—Ä–∞—Ü–∏—è - /moderate \n üßπ | –ö–∏–∫–Ω—É—Ç—å –∞–∫–∫–∞—É–Ω—Ç - /mc_kick \n üñ• | —Å–Ω—è—Ç—å CID –∑–∞—â–∏—Ç—É - /mc_cid \n üçÉ | —Å–Ω—è—Ç—å SKIN –∑–∞—â–∏—Ç—É - /mc_skin \n üíî | –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç - /unlink")

        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        bot.send_message(chat_id, "‚ú®", reply_markup=telebot.types.ReplyKeyboardRemove())
    else:
        bot.reply_to(message, "üö´ | –¢–≤–æ–π –Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¢–ì –±–æ—Ç—É.")
    conn_minecraft.close()


# –∫–∏–∫ –° –°–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
def kick_account(username):
    try:
        with MCRcon(RCON_HOST, RCON_PASSWORD, port=RCON_PORT) as mcr:
            response = mcr.command(f"{kick_cmd} {username}")
        print(response)
        return response
    except Exception as e:
        print(e)
        return str(e)

def kick_account_wrapper(username):
    result = kick_account(username)
    return result

@bot.message_handler(commands=['mc_kick'])
def mc_kick_command(message):
    chat_id = message.chat.id
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT username FROM accounts WHERE tg_id = ?", (str(chat_id),))
    result = cursor_minecraft.fetchall()
    if result:
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        for i, row in enumerate(result):
            keyboard.add(f"{i + 1}. {row[0]}")
        msg = bot.reply_to(message, "üßπ | –í—ã–±–µ—Ä–∏ –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∫–∏–∫–Ω—É—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_mc_kick_step)
    else:
        bot.reply_to(message, "üö´ | –¢–≤–æ–π –Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¢–ì –±–æ—Ç—É :'(")
    conn_minecraft.close()

def process_mc_kick_step(message):
    chat_id = message.chat.id
    text = message.text.split('.')
    if len(text) != 2 or not text[0].isdigit():
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –≤—ã–±–µ—Ä–∏ –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∫–∏–∫–Ω—É—Ç—å, –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    num = int(text[0])
    if num < 1 or num > 3:
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 3.")
        return
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT username FROM accounts WHERE tg_id = ?", (str(chat_id),))
    result = cursor_minecraft.fetchall()
    if len(result) >= num:
        username = result[num - 1][0]
        p = Process(target=kick_account_wrapper, args=(username,))
        p.start()
        p.join()
        bot.reply_to(message, f"üßπ | –ê–∫–∫–∞—É–Ω—Ç {username} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∫–∏–∫–Ω—É—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞!")
                # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        bot.send_message(chat_id, "üßπ", reply_markup=telebot.types.ReplyKeyboardRemove())
    else:
        bot.reply_to(message, f"üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(result)}.")
    conn_minecraft.close()

# –ü—É—Ç—å –∫ –ø–ª–∞–≥–∏–Ω—É cid –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Minecraft
cid_path = "/root/srvok/plugins/TGCID/data/"

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–≥ –±–æ—Ç—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö store.db
@bot.message_handler(commands=['mc_cid'])
def mc_cid_command(message):
    chat_id = message.chat.id
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT username FROM accounts WHERE tg_id = ?", (str(chat_id),))
    result = cursor_minecraft.fetchall()
    if result:
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        for i, row in enumerate(result):
            keyboard.add(f"{i + 1}. {row[0]}")
        msg = bot.reply_to(message, "üñ• | –í—ã–±–µ—Ä–∏ –Ω–∏–∫, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å CID –∑–∞—â–∏—Ç—É:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_mc_cid_step, result)
    else:
        bot.reply_to(message, "üö´ | –¢–≤–æ–π –Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¢–ì –±–æ—Ç—É :'(")
    conn_minecraft.close()

def process_mc_cid_step(message, result):
    chat_id = message.chat.id
    text = message.text.split('.')
    if len(text) != 2 or not text[0].isdigit():
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –≤—ã–±–µ—Ä–∏ –Ω–∏–∫, —á—Ç–æ–±—ã –æ—Ç–≤—è–∑–∞—Ç—å CID –∑–∞—â–∏—Ç—É :o")
        return
    num = int(text[0])
    if num < 1 or num > 3:
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 3.")
        return
    if len(result) >= num:
        username = result[num - 1][0]
        if delete_mc_cid(message, username):
            bot.reply_to(message, f"üñ• | –û—Ç–≤—è–∑–∫–∞ CID –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞ {username} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ :D")
        else:
            bot.reply_to(message, f"üö´ | –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å CID –∞–∫–∫–∞—É–Ω—Ç–∞ {username} :[")
                    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        bot.send_message(chat_id, "ü™Ñ", reply_markup=telebot.types.ReplyKeyboardRemove())
    else:
        bot.reply_to(message, f"üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(result)}.")

# –§—É–Ω–∫—Ü–∏—è –û—Ç–≤—è–∑–∫–∏ CID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö store.db
def delete_mc_cid(message, username):
    try:
        conn = sqlite3.connect(cid_path + 'store.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM cid WHERE player = ?", (username,))
        result = cursor.fetchone()
        if result:
            cursor.execute("DELETE FROM cid WHERE player = ?", (username,))
            conn.commit()
            conn.close()
            return True
        else:
            bot.reply_to(message, f"üö´ | –ù–∏–∫ {username} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ CID.")
            conn.close()
            return False
    except Exception as e:
        print(e)
        return False


# —Å–º–µ–Ω–∞ –ü–∞—Ä–æ–ª—è –ê–∫–∫–∞—É–Ω—Ç—É
@bot.message_handler(commands=['ch_pass'])
def change_password_command(message):
    chat_id = message.chat.id
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT username FROM accounts WHERE tg_id = ?", (str(chat_id),))
    result = cursor_minecraft.fetchall()
    if result:
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        for i, row in enumerate(result):
            keyboard.add(f"{i + 1}. {row[0]}")
        msg = bot.reply_to(message, "üîë | –í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_change_password_step)
    else:
        bot.reply_to(message, "üö´ | –¢–≤–æ–π –Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¢–ì –±–æ—Ç—É :(")
    conn_minecraft.close()

def process_change_password_step(message):
    chat_id = message.chat.id
    text = message.text.split('.')
    if len(text) != 2 or not text[0].isdigit():
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    num = int(text[0])
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT username FROM accounts WHERE tg_id = ?", (str(chat_id),))
    result = cursor_minecraft.fetchall()
    if len(result) >= num:
        username = result[num - 1][0]
        msg = bot.reply_to(message, f"üîë | –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}:")
        bot.register_next_step_handler(msg, lambda m: process_change_password_confirm(m, username))
                # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        bot.send_message(chat_id, "üîë", reply_markup=telebot.types.ReplyKeyboardRemove())
    else:
        bot.reply_to(message, f"üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(result)}.")
        
    conn_minecraft.close()

def process_change_password_confirm(message, username):
    new_password = message.text.strip()
    if change_password(username, new_password):
        bot.reply_to(message, f"üîë | –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π: {new_password}!")
    else:
        bot.reply_to(message, f"üö´ | –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ü—É—Ç—å –∫ –ø–ª–∞–≥–∏–Ω—É skin –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Minecraft
skin_path = "/root/srvok/plugins/TGCID/data/"

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–≥ –±–æ—Ç—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö store.db
@bot.message_handler(commands=['mc_skin'])
def mc_skin_command(message):
    chat_id = message.chat.id
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT username FROM accounts WHERE tg_id = ?", (str(chat_id),))
    result = cursor_minecraft.fetchall()
    if result:
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        for i, row in enumerate(result):
            keyboard.add(f"{i + 1}. {row[0]}")
        msg = bot.reply_to(message, "üîë | –í—ã–±–µ—Ä–∏ –Ω–∏–∫, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å SKIN –∑–∞—â–∏—Ç—É:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_mc_skin_step, result)
    else:
        bot.reply_to(message, "üö´ | –¢–≤–æ–π –Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¢–ì –±–æ—Ç—É :'(")
    conn_minecraft.close()

def process_mc_skin_step(message, result):
    chat_id = message.chat.id
    text = message.text.split('.')
    if len(text) != 2 or not text[0].isdigit():
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –≤—ã–±–µ—Ä–∏ –Ω–∏–∫, —á—Ç–æ–±—ã –æ—Ç–≤—è–∑–∞—Ç—å SKIN –∑–∞—â–∏—Ç—É :o")
        return
    num = int(text[0])
    if num < 1 or num > 3:
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 3.")
        return
    if len(result) >= num:
        username = result[num - 1][0]
        if delete_mc_skin(message, username):
            bot.reply_to(message, f"üñ• | –û—Ç–≤—è–∑–∫–∞ SKIN –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞ {username} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ :D")
        else:
            bot.reply_to(message, f"üö´ | –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å SKIN –∞–∫–∫–∞—É–Ω—Ç–∞ {username} :[")
                     # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        bot.send_message(chat_id, "üë§", reply_markup=telebot.types.ReplyKeyboardRemove())
    else:
        bot.reply_to(message, f"üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(result)}.")

# –§—É–Ω–∫—Ü–∏—è –û—Ç–≤—è–∑–∫–∏ SKIN –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö store.db
def delete_mc_skin(message, username):
    try:
        conn = sqlite3.connect(skin_path + 'store.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM skin WHERE player = ?", (username,))
        result = cursor.fetchone()
        if result:
            cursor.execute("DELETE FROM skin WHERE player = ?", (username,))
            conn.commit()
            conn.close()
            return True
        else:
            bot.reply_to(message, f"üö´ | –ù–∏–∫ {username} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ SKIN.")
            conn.close()
            return False
    except Exception as e:
        print(e)
        return False

# RCON

## say

@bot.message_handler(commands=['say'])
def rcon_say_command(message):
    chat_id = message.chat.id
    conn = sqlite3.connect(db_path_minecraft)
    cursor = conn.cursor()
    cursor.execute("SELECT username FROM accounts WHERE tg_id = ?", (str(chat_id),))
    result = cursor.fetchall()
    conn.close()

    if result:
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        for username in result:
            keyboard.add(username[0])
        msg = bot.reply_to(message, "‚úâÔ∏è | –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_rcon_say_step)
    else:
        bot.reply_to(message, "üö´ | –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
        bot.reply_to(message, "üò¢")

def process_rcon_say_step(message):
    chat_id = message.chat.id
    selected_account = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT * FROM accounts WHERE tg_id = ? AND username = ?", (str(chat_id), selected_account))
    result = cursor_minecraft.fetchone()

    if result:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∏–∫
        cursor_minecraft.execute("SELECT reason, time FROM blocked WHERE username = ?", (selected_account,))
        block_result = cursor_minecraft.fetchone()

        if block_result:
            reason, time = block_result
            bot.reply_to(message, f"üö´ | –í–∞—à –Ω–∏–∫ {selected_account} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Å–æ–ª–µ —Å–µ—Ä–≤–µ—Ä–∞! \n üìú | –ü—Ä–∏—á–∏–Ω–∞: {reason} \n üß≠ | –ö–æ–≥–¥–∞: {time}")
            bot.send_message(chat_id, "üìù", reply_markup=telebot.types.ReplyKeyboardRemove())
        else:
            cursor_minecraft.execute("SELECT access FROM accounts WHERE username = ?", (selected_account,))
            access_result = cursor_minecraft.fetchone()
            conn_minecraft.close()

            if access_result and access_result[0] >= 1:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                msg = bot.reply_to(message, "üìù | –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:")
                bot.register_next_step_handler(msg, send_rcon_say_message, selected_account)
            else:
                bot.reply_to(message, f"üö´ | –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /say!")
                bot.send_message(chat_id, "üìù", reply_markup=telebot.types.ReplyKeyboardRemove())
    else:
        conn_minecraft.close()
        bot.reply_to(message, "üö´ | –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

def send_rcon_say_message(message, selected_account):
    chat_id = message.chat.id
    text = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º RCON-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Minecraft
    def send_rcon():
        try:
            with MCRcon(RCON_HOST, RCON_PASSWORD, port=RCON_PORT) as mcr:
                resp = mcr.command(f'say {text} (by {selected_account})')
                bot.send_message(chat_id, f"üì© | –°–æ–æ–±—â–µ–Ω–∏–µ '{text}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–º {selected_account} :D")
                
                bot.send_message(chat_id, "üìù", reply_markup=telebot.types.ReplyKeyboardRemove())
        except Exception as e:
            bot.send_message(chat_id, f"üö´ | –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:\n\n{e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_rcon –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    p = multiprocessing.Process(target=send_rcon)
    p.start()


#moderate 

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /moderate
moderate_keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
moderate_keyboard.row("–ó–∞–±–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "–†–∞–∑–±–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
moderate_keyboard.row("–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è", "–ë–∞–Ω-–ª–∏—Å—Ç")
moderate_keyboard.row("–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø", "–ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø")


@bot.message_handler(commands=['moderate'])
def moderate_command(message):
    access_level = get_access_level(message.chat.id)
    if access_level >= 3:
        bot.reply_to(message, "üëë | –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=moderate_keyboard)
        bot.reply_to(message, f"üëë")
    else:
        bot.reply_to(message, "üö´ | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if is_linked(message.chat.id):
        access_level = get_access_level(message.chat.id)
        if message.text == "–ó–∞–±–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç" and access_level == 4:
            bot.reply_to(message, "üö´ | –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å:")
            bot.register_next_step_handler(message, ban_account)
        elif message.text == "–†–∞–∑–±–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç" and access_level == 4:
            bot.reply_to(message, "ü•≥ | –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å:")
            bot.register_next_step_handler(message, unban_account)
        elif message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è" and access_level >= 3:
            show_all_users(message)
        elif message.text == "–ë–∞–Ω-–ª–∏—Å—Ç" and access_level >= 3:
            show_ban_list(message)
        elif message.text == "–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø" and access_level == 4:
            bot.reply_to(message, "üîë | –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç 0 –¥–æ 4) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
            bot.register_next_step_handler(message, grant_access)
        elif message.text == "–ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø" and access_level == 4:
            bot.reply_to(message, "üò¢ | –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø:")
            bot.register_next_step_handler(message, revoke_access)
    else:
        bot.reply_to(message, "üö´ | –ü—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∫ –±–æ—Ç—É, –Ω–∞–ø–∏—Å–∞–≤ /link")
    



def is_linked(tg_id):
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT * FROM accounts WHERE tg_id = ?", (str(tg_id),))
    linked = cursor_minecraft.fetchone()
    conn_minecraft.close()
    return linked is not None


def get_access_level(tg_id):
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT access FROM accounts WHERE tg_id = ?", (str(tg_id),))
    access_level = cursor_minecraft.fetchone()
    conn_minecraft.close()
    return access_level[0] if access_level else 0


def ban_account(message):
    text = message.text.strip().split()
    if len(text) < 2:
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <–Ω–∏–∫–Ω–µ–π–º> <–ø—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞>")
    
        return
    username = text[0]
    reason = ' '.join(text[1:])
    tg_id = message.chat.id
    time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute(
        "INSERT INTO blocked (username, tg_id, reason, time) VALUES (?, ?, ?, ?)",
        (username, str(tg_id), reason, time))
    conn_minecraft.commit()
    conn_minecraft.close()

    bot.reply_to(message,
                 f"üö´ | –ê–∫–∫–∞—É–Ω—Ç {username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}.")
    bot.reply_to(message, f"üò∂")

def unban_account(message):
    username = message.text.strip()
    tg_id = message.chat.id
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("DELETE FROM blocked WHERE username = ? AND tg_id = ?", (username, str(tg_id)))
    conn_minecraft.commit()
    conn_minecraft.close()
    bot.reply_to(message, f"‚ú® | –ê–∫–∫–∞—É–Ω—Ç {username} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
    bot.reply_to(message, f"ü•≥")


def show_all_users(message):
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT * FROM accounts WHERE tg_id = ?", (str(message.chat.id),))
    users = cursor_minecraft.fetchall()
    conn_minecraft.close()

    response = "üìÅ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:\n"
    for user in users:
        response += f"–¢–ì_ID: {user[2]} | –ù–∏–∫: {user[1]} | –î–æ—Å—Ç—É–ø: {user[3]}\n"

    bot.reply_to(message, response)


def show_ban_list(message):
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("SELECT * FROM blocked")
    bans = cursor_minecraft.fetchall()
    conn_minecraft.close()

    response = "üö´ | –ë–∞–Ω-–ª–∏—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n"
    for ban in bans:
        response += f"–¢–ì_ID: {ban[2]} | –ù–∏–∫: {ban[1]} | –ü—Ä–∏—á–∏–Ω–∞: {ban[3]} | –í—Ä–µ–º—è: {ban[4]}\n"

    bot.reply_to(message, response)


def grant_access(message):
    text = message.text.strip().split()
    if len(text) != 2 or not text[1].isdigit() or int(text[1]) < 0 or int(text[1]) > 4:
        bot.reply_to(message, "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <–Ω–∏–∫–Ω–µ–π–º> <—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç 0 –¥–æ 4>")

        return
    username = text[0]
    access = int(text[1])
    # –í—ã–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("UPDATE accounts SET access = ? WHERE username = ?", (access, username))
    conn_minecraft.commit()
    conn_minecraft.close()
    bot.reply_to(message, f"‚≠ê | –ê–∫–∫–∞—É–Ω—Ç—É {username} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω {access} —É—Ä. –¥–æ—Å—Ç—É–ø–∞!")
    bot.reply_to(message, f"‚úÖ")

def revoke_access(message):
    username = message.text.strip()
    tg_id = message.chat.id
    # –ó–∞–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn_minecraft = sqlite3.connect(db_path_minecraft)
    cursor_minecraft = conn_minecraft.cursor()
    cursor_minecraft.execute("UPDATE accounts SET access = 0 WHERE username = ?", (username,))
    conn_minecraft.commit()
    conn_minecraft.close()
    bot.reply_to(message, f"‚≠ê | –î–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω.")
    bot.reply_to(message, f"‚úÖ")

# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(func=lambda message: True)
def error_message(message):
    bot.send_message(message.chat.id, "üö´ | –û—à–∏–±–∫–∞! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /mc_profile –∏–ª–∏ /link.")

print("–ë–æ—Ç TGlink —Ä–∞–±–æ—Ç–∞–µ—Ç!")
bot.polling()
